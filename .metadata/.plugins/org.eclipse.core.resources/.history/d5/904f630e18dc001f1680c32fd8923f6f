package com.cab;

import com.cab.controller.FareCalculationController;
import com.cab.model.Cab;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.web.client.RestTemplate;

import static org.mockito.Mockito.*;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

public class FareCalculationControllerTest {

    private MockMvc mockMvc;

    @Mock
    private RestTemplate restTemplate;

    @InjectMocks
    private FareCalculationController fareCalculationController;

    @BeforeEach
    public void setup() {
        MockitoAnnotations.openMocks(this);
        mockMvc = MockMvcBuilders.standaloneSetup(fareCalculationController).build();
    }

    @Test
    public void testCalculateFare() throws Exception {
        // Prepare mock data
        Cab cab = new Cab();
        cab.setSource("London");
        cab.setDestination("Manchester");

        // Prepare mocked fare calculation response
        double fare = 45.5;

        // Mock the RestTemplate call
        when(restTemplate.getForObject(anyString(), eq(Double.class))).thenReturn(fare);

        // Perform the POST request and verify the response
        mockMvc.perform(post("/fare-calculation/calculate-fare")
                        .param("source", "London")
                        .param("destination", "Manchester"))
                .andExpect(status().isOk())
                .andExpect(model().attribute("cabBooking", cab))  // Assert that the 'cabBooking' object is updated in the model
                .andExpect(model().attribute("cabBooking.fare", fare))  // Assert the fare is added to the model
                .andExpect(view().name("fareCalculation"));  // Ensure the correct view is rendered

        // Verify that the RestTemplate was called once
        verify(restTemplate, times(1)).getForObject(anyString(), eq(Double.class));
    }
}
